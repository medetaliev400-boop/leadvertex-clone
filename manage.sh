#!/bin/bash

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LeadVertex Clone
# –ê–≤—Ç–æ—Ä: MiniMax Agent

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "${BLUE}$1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
show_menu() {
    print_header "üöÄ LeadVertex Clone - –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    echo "============================================="
    echo ""
    echo "BACKEND –°–ï–†–í–ï–† (157.230.27.200):"
    echo "  1) –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å Backend –ø–æ–ª–Ω–æ—Å—Ç—å—é"
    echo "  2) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Backend —Å–µ—Ä–≤–∏—Å—ã"
    echo "  3) –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Backend"
    echo "  4) –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Backend"
    echo "  5) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Backend"
    echo ""
    echo "FRONTEND –°–ï–†–í–ï–† (164.90.219.122):"
    echo "  6) –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å Frontend –ø–æ–ª–Ω–æ—Å—Ç—å—é"
    echo "  7) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Frontend —Å–µ—Ä–≤–∏—Å—ã"
    echo "  8) –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Frontend"
    echo "  9) –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Frontend"
    echo "  10) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Frontend"
    echo ""
    echo "–û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´:"
    echo "  11) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"
    echo "  12) –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã"
    echo "  13) –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏–∑ Git"
    echo "  14) –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    echo ""
    echo "  0) –í—ã—Ö–æ–¥"
    echo ""
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Backend
deploy_backend() {
    print_header "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Backend..."
    
    if [ ! -f "docker-compose.backend.yml" ]; then
        print_error "docker-compose.backend.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi
    
    ./deploy-backend-new.sh
}

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Frontend
deploy_frontend() {
    print_header "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Frontend..."
    
    if [ ! -d "frontend" ]; then
        print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        return 1
    fi
    
    ./deploy-frontend-new.sh
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Backend
restart_backend() {
    print_header "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Backend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.backend.yml restart
    print_success "Backend —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Frontend
restart_frontend() {
    print_header "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Frontend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if [ -f "docker-compose.frontend.yml" ]; then
        docker-compose -f docker-compose.frontend.yml restart
        print_success "Frontend —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã"
    else
        print_error "docker-compose.frontend.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ Backend
show_backend_logs() {
    print_header "üìã –õ–æ–≥–∏ Backend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.backend.yml logs --tail=100 -f
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤ Frontend
show_frontend_logs() {
    print_header "üìã –õ–æ–≥–∏ Frontend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if [ -f "docker-compose.frontend.yml" ]; then
        docker-compose -f docker-compose.frontend.yml logs --tail=100 -f
    else
        print_error "docker-compose.frontend.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ Backend
show_backend_status() {
    print_header "üìä –°—Ç–∞—Ç—É—Å Backend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.backend.yml ps
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ Frontend
show_frontend_status() {
    print_header "üìä –°—Ç–∞—Ç—É—Å Frontend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if [ -f "docker-compose.frontend.yml" ]; then
        docker-compose -f docker-compose.frontend.yml ps
    else
        print_warning "docker-compose.frontend.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Backend
stop_backend() {
    print_header "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Backend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.backend.yml down
    print_success "Backend —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Frontend
stop_frontend() {
    print_header "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Frontend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if [ -f "docker-compose.frontend.yml" ]; then
        docker-compose -f docker-compose.frontend.yml down
        print_success "Frontend —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_warning "docker-compose.frontend.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
health_check() {
    print_header "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã..."
    
    echo ""
    echo "Backend –ø—Ä–æ–≤–µ—Ä–∫–∏:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend API
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        print_success "Backend API: OK"
    else
        print_error "Backend API: –ù–ï–î–û–°–¢–£–ü–ï–ù"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend Nginx
    if curl -k https://localhost/health > /dev/null 2>&1; then
        print_success "Backend Nginx: OK"
    else
        print_error "Backend Nginx: –ù–ï–î–û–°–¢–£–ü–ï–ù"
    fi
    
    echo ""
    echo "Frontend –ø—Ä–æ–≤–µ—Ä–∫–∏:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend
    if curl -f http://localhost/health > /dev/null 2>&1; then
        print_success "Frontend HTTP: OK"
    else
        print_error "Frontend HTTP: –ù–ï–î–û–°–¢–£–ü–ï–ù"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend HTTPS
    if curl -k https://localhost/health > /dev/null 2>&1; then
        print_success "Frontend HTTPS: OK"
    else
        print_error "Frontend HTTPS: –ù–ï–î–û–°–¢–£–ü–ï–ù"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
    if curl -k https://localhost/api/health > /dev/null 2>&1; then
        print_success "API Proxy: OK"
    else
        print_warning "API Proxy: –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–≤–æ–∑–º–æ–∂–Ω–æ backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
    fi
    
    echo ""
    echo "Docker —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ Docker —Ä–µ—Å—É—Ä—Å–æ–≤
clean_docker() {
    print_header "üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.backend.yml down 2>/dev/null || true
    [ -f "docker-compose.frontend.yml" ] && docker-compose -f docker-compose.frontend.yml down 2>/dev/null || true
    
    echo "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
    docker system prune -f
    
    print_success "Docker —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞
update_code() {
    print_header "üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ Git..."
    
    git fetch origin
    git pull origin main
    
    print_success "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω"
    print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
show_docs() {
    print_header "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    
    if [ -f "FULL_DEPLOYMENT_GUIDE.md" ]; then
        echo "–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ: FULL_DEPLOYMENT_GUIDE.md"
        echo ""
        echo "–û—Å–Ω–æ–≤–Ω—ã–µ URL –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
        echo "- Frontend: https://moonline.pw/"
        echo "- Backend API: https://157.230.27.200:8000/docs"
        echo "- Health Check Backend: https://157.230.27.200:8000/health"
        echo "- Health Check Frontend: https://moonline.pw/health"
        echo ""
        echo "IP –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤:"
        echo "- Frontend —Å–µ—Ä–≤–µ—Ä: 164.90.219.122"
        echo "- Backend —Å–µ—Ä–≤–µ—Ä: 157.230.27.200"
    else
        print_error "–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
main() {
    while true; do
        show_menu
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: " choice
        
        case $choice in
            1)
                deploy_backend
                ;;
            2)
                restart_backend
                ;;
            3)
                show_backend_logs
                ;;
            4)
                show_backend_status
                ;;
            5)
                stop_backend
                ;;
            6)
                deploy_frontend
                ;;
            7)
                restart_frontend
                ;;
            8)
                show_frontend_logs
                ;;
            9)
                show_frontend_status
                ;;
            10)
                stop_frontend
                ;;
            11)
                health_check
                ;;
            12)
                clean_docker
                ;;
            13)
                update_code
                ;;
            14)
                show_docs
                ;;
            0)
                print_success "–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
                exit 0
                ;;
            *)
                print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                ;;
        esac
        
        echo ""
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
        clear
    done
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "docker-compose.backend.yml" ] && [ ! -d "frontend" ]; then
    print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ leadvertex-clone"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
main