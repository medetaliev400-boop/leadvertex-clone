version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: leadvertex-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: leadvertex
      POSTGRES_USER: leadvertex_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U leadvertex_user -d leadvertex"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: leadvertex-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: leadvertex-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://leadvertex_user:${POSTGRES_PASSWORD}@db:5432/leadvertex
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=http://157.230.100.209,https://157.230.100.209,https://moonline.pw,https://www.moonline.pw
    ports:
      - "8000:8000"
    volumes:
      - media_files:/app/media
      - static_files:/app/static
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx for API
  nginx-api:
    image: nginx:alpine
    container_name: leadvertex-nginx-api
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/backend.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - backend
    networks:
      - backend-network

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: leadvertex-celery-worker
    restart: unless-stopped
    command: celery -A app.celery_app worker -l info
    environment:
      - DATABASE_URL=postgresql://leadvertex_user:${POSTGRES_PASSWORD}@db:5432/leadvertex
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - media_files:/app/media
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: leadvertex-celery-beat
    restart: unless-stopped
    command: celery -A app.celery_app beat -l info
    environment:
      - DATABASE_URL=postgresql://leadvertex_user:${POSTGRES_PASSWORD}@db:5432/leadvertex
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - media_files:/app/media
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network

volumes:
  postgres_data:
  redis_data:
  static_files:
  media_files:
  uploads:
  logs:

networks:
  backend-network:
    driver: bridge