version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: leadvertex
      POSTGRES_USER: leadvertex
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-leadvertex123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U leadvertex"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://leadvertex:${POSTGRES_PASSWORD:-leadvertex123}@postgres/leadvertex
      - DATABASE_URL_SYNC=postgresql://leadvertex:${POSTGRES_PASSWORD:-leadvertex123}@postgres/leadvertex
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY:-leadvertex-super-secret-key-2025}
    volumes:
      - backend_uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app.celery worker --loglevel=info --queues=default,telephony,notifications,automation,analytics --concurrency=4
    environment:
      - DATABASE_URL=postgresql+asyncpg://leadvertex:${POSTGRES_PASSWORD:-leadvertex123}@postgres/leadvertex
      - DATABASE_URL_SYNC=postgresql://leadvertex:${POSTGRES_PASSWORD:-leadvertex123}@postgres/leadvertex
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DEBUG=${DEBUG:-false}
    volumes:
      - backend_uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery_app.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (Scheduler)
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app.celery beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - DATABASE_URL=postgresql+asyncpg://leadvertex:${POSTGRES_PASSWORD:-leadvertex123}@postgres/leadvertex
      - DATABASE_URL_SYNC=postgresql://leadvertex:${POSTGRES_PASSWORD:-leadvertex123}@postgres/leadvertex
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DEBUG=${DEBUG:-false}
    volumes:
      - celery_beat_data:/tmp
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:8000}
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flower (Celery monitoring) - only in development
  flower:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A app.celery_app.celery flower --port=5555 --basic_auth=admin:${FLOWER_PASSWORD:-admin123}
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/ssl:/etc/nginx/ssl
      - backend_uploads:/var/www/uploads
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
  celery_beat_data:

networks:
  default:
    driver: bridge