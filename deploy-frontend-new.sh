#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Frontend –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 139.59.158.109
# –ê–≤—Ç–æ—Ä: MiniMax Agent

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Frontend –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ 139.59.158.109"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "frontend" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    echo "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/leadvertex-clone"
    exit 1
fi

echo "üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
cat > .env << 'EOF'
# Backend Configuration
REACT_APP_API_URL=https://159.89.108.100:8000
BACKEND_URL=https://159.89.108.100:8000

# Server Configuration
FRONTEND_SERVER_IP=139.59.158.109
BACKEND_SERVER_IP=159.89.108.100

# Domain Configuration
MAIN_DOMAIN=moonline.pw
WILDCARD_DOMAIN=*.moonline.pw

# Build Configuration
NODE_ENV=production
GENERATE_SOURCEMAP=false
EOF

echo "‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"

echo "üìã –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –¥–ª—è frontend —Å–±–æ—Ä–∫–∏..."
cat > frontend/.env << 'EOF'
REACT_APP_API_URL=https://159.89.108.100:8000
GENERATE_SOURCEMAP=false
EOF

echo "‚úÖ Frontend .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"

echo "üîê –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
cd docker/ssl

# –°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout moonline.pw.key \
    -out moonline.pw.crt \
    -subj "/C=US/ST=State/L=City/O=Organization/CN=moonline.pw" 2>/dev/null

openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout wildcard.moonline.pw.key \
    -out wildcard.moonline.pw.crt \
    -subj "/C=US/ST=State/L=City/O=Organization/CN=*.moonline.pw" 2>/dev/null

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
chmod 644 *.crt
chmod 600 *.key

echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã"

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å
cd ../..

echo "üìù –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –¥–ª—è Frontend..."
cat > docker-compose.frontend.yml << 'EOF'
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: leadvertex-frontend
    environment:
      - REACT_APP_API_URL=https://159.89.108.100:8000
    volumes:
      - frontend_build:/app/build
    depends_on:
      - nginx-frontend

  nginx-frontend:
    image: nginx:alpine
    container_name: leadvertex-nginx-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/frontend.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl:ro
      - frontend_build:/usr/share/nginx/html:ro
    restart: unless-stopped

volumes:
  frontend_build:
EOF

echo "‚úÖ docker-compose.frontend.yml —Å–æ–∑–¥–∞–Ω"

echo "üìù –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Frontend..."
mkdir -p docker/nginx

cat > docker/nginx/frontend.conf << 'EOF'
# Upstream backend API
upstream backend_api {
    server 159.89.108.100:8000;
    keepalive 32;
}

# Main frontend server
server {
    listen 80;
    listen 443 ssl http2;
    server_name moonline.pw www.moonline.pw 139.59.158.109;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/moonline.pw.crt;
    ssl_certificate_key /etc/nginx/ssl/moonline.pw.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;

    # Frontend static files
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }

    # Proxy API requests to backend server
    location /api/ {
        proxy_pass http://backend_api/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "https://moonline.pw" always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check
    location /health {
        access_log off;
        return 200 'Frontend OK';
        add_header Content-Type text/plain;
    }

    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        root /usr/share/nginx/html;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff always;
    }
}

# Subdomain support (*.moonline.pw)
server {
    listen 80;
    listen 443 ssl http2;
    server_name *.moonline.pw;

    # Wildcard SSL certificate
    ssl_certificate /etc/nginx/ssl/wildcard.moonline.pw.crt;
    ssl_certificate_key /etc/nginx/ssl/wildcard.moonline.pw.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;

    # Extract subdomain
    set $subdomain "";
    if ($host ~* "^(.+)\.moonline\.pw$") {
        set $subdomain $1;
    }

    # Frontend for subdomains
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        
        # Project-specific headers
        add_header X-Project-Subdomain $subdomain always;
        add_header X-Project-Type "project" always;
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
    }

    # API proxy with subdomain context
    location /api/ {
        proxy_pass http://backend_api/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Project-Domain $host;
        proxy_set_header X-Project-Subdomain $subdomain;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Redirect admin access to main domain
    location /admin {
        return 301 https://moonline.pw$request_uri;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name moonline.pw www.moonline.pw *.moonline.pw 139.59.158.109;
    return 301 https://$server_name$request_uri;
}
EOF

echo "‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

echo "üê≥ –®–∞–≥ 6: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.frontend.yml down || true

echo "üì¶ –®–∞–≥ 7: –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
docker-compose -f docker-compose.frontend.yml up --build -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

echo "üìä –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.frontend.yml ps

echo ""
echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
if curl -f http://localhost/health > /dev/null 2>&1; then
    echo "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Frontend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS
if curl -k https://localhost/health > /dev/null 2>&1; then
    echo "‚úÖ Frontend HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå Frontend HTTPS –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ API
if curl -k https://localhost/api/health > /dev/null 2>&1; then
    echo "‚úÖ API –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ö†Ô∏è  API –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–≤–æ–∑–º–æ–∂–Ω–æ backend –Ω–µ –∑–∞–ø—É—â–µ–Ω)"
fi

echo ""
echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Frontend –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìä –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "docker-compose -f docker-compose.frontend.yml ps      # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "docker-compose -f docker-compose.frontend.yml logs -f # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "curl http://localhost/health                          # –¢–µ—Å—Ç Frontend"
echo "curl -k https://localhost/api/health                  # –¢–µ—Å—Ç API proxy"
echo ""
echo "üåê Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞:"
echo "- http://139.59.158.109/ (HTTP)"
echo "- https://139.59.158.109/ (HTTPS)"
echo "- https://moonline.pw/ (–ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS)"